// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/theplant/plantpkg/template"
	"sync"
)

var (
	lockTemplateServiceMockSayHello sync.RWMutex
)

// TemplateServiceMock is a mock implementation of TemplateService.
//
//     func TestSomethingThatUsesTemplateService(t *testing.T) {
//
//         // make and configure a mocked TemplateService
//         mockedTemplateService := &TemplateServiceMock{
//             SayHelloFunc: func(input *template.SayHelloInput) (*template.SayHelloResult, error) {
// 	               panic("TODO: mock out the SayHello method")
//             },
//         }
//
//         // TODO: use mockedTemplateService in code that requires TemplateService
//         //       and then make assertions.
//
//     }
type TemplateServiceMock struct {
	// SayHelloFunc mocks the SayHello method.
	SayHelloFunc func(input *template.SayHelloInput) (*template.SayHelloResult, error)

	// calls tracks calls to the methods.
	calls struct {
		// SayHello holds details about calls to the SayHello method.
		SayHello []struct {
			// Input is the input argument value.
			Input *template.SayHelloInput
		}
	}
}

// SayHello calls SayHelloFunc.
func (mock *TemplateServiceMock) SayHello(input *template.SayHelloInput) (*template.SayHelloResult, error) {
	if mock.SayHelloFunc == nil {
		panic("TemplateServiceMock.SayHelloFunc: method is nil but TemplateService.SayHello was just called")
	}
	callInfo := struct {
		Input *template.SayHelloInput
	}{
		Input: input,
	}
	lockTemplateServiceMockSayHello.Lock()
	mock.calls.SayHello = append(mock.calls.SayHello, callInfo)
	lockTemplateServiceMockSayHello.Unlock()
	return mock.SayHelloFunc(input)
}

// SayHelloCalls gets all the calls that were made to SayHello.
// Check the length with:
//     len(mockedTemplateService.SayHelloCalls())
func (mock *TemplateServiceMock) SayHelloCalls() []struct {
	Input *template.SayHelloInput
} {
	var calls []struct {
		Input *template.SayHelloInput
	}
	lockTemplateServiceMockSayHello.RLock()
	calls = mock.calls.SayHello
	lockTemplateServiceMockSayHello.RUnlock()
	return calls
}
